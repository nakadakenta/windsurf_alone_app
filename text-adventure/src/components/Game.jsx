import React, { useState } from 'react';
import './Game.css';
import CharacterStatus from './CharacterStatus';
import EventSystem from './EventSystem';

const Game = () => {
  const [location, setLocation] = useState('start');
  const [inventory, setInventory] = useState([]);
  const [message, setMessage] = useState('');
  const [health, setHealth] = useState(100);
  const [mana, setMana] = useState(100);
  const [gold, setGold] = useState(100);

  const locations = {
    start: {
      description: '„ÅÇ„Å™„Åü„ÅØÊùë„ÅÆÂÖ•„ÇäÂè£„Å´„ÅÑ„Åæ„Åô„ÄÇÊ£Æ„ÅåË¶ã„Åà„Åæ„Åô„ÄÇ',
      options: [
        { text: 'Ê£Æ„Å´ÂÖ•„Çã', location: 'forest' },
        { text: 'Êùë„ÇíÊé¢Á¥¢„Åô„Çã', location: 'village' },
        { text: 'ÂïÜ‰∫∫„Å®Ë©±„Åô', location: 'shop' }
      ]
    },
    forest: {
      description: 'Ê∑±„ÅÑÊ£Æ„ÅÆ‰∏≠„Å´„ÅÑ„Åæ„Åô„ÄÇÊú®„ÄÖ„ÅåËåÇ„Å£„Å¶„ÅÑ„Åæ„Åô„ÄÇ',
      options: [
        { text: 'Êàª„Çã', location: 'start' },
        { text: 'Â••„Å´ÈÄ≤„ÇÄ', location: 'deepForest' },
        { text: 'ÁÅ´„Çí„Å§„Åë„Çã', location: 'forest', action: () => {
          if (inventory.includes('torch')) {
            setMessage('ÁÅ´„Çí„Å§„Åë„Å¶Âë®Âõ≤„ÇíÁÖß„Çâ„Åó„Åæ„Åó„ÅüÔºÅ');
          } else {
            setMessage('ÁÅ´„Çí„Å§„Åë„Çã„Åü„ÇÅ„ÅÆÈÅìÂÖ∑„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ');
          }
        } }
      ]
    },
    deepForest: {
      description: '„Åï„Çâ„Å´Ê∑±„ÅÑÊ£Æ„Å´ÈÄ≤„Åø„Åæ„Åó„Åü„ÄÇ‰∏çÊ∞óÂë≥„Å™Èü≥„ÅåËÅû„Åì„Åà„Åæ„Åô„ÄÇ',
      options: [
        { text: 'Êàª„Çã', location: 'forest' },
        { text: 'Ë¨é„ÅÆÂÖâ„Å´ÈÄ≤„ÇÄ', location: 'treasure' },
        { text: 'È≠îÊ≥ï„Çí‰Ωø„ÅÜ', location: 'deepForest', action: () => {
          if (mana >= 30) {
            setMana((prev) => prev - 30);
            setMessage('È≠îÊ≥ï„Çí‰ΩøÁî®„Åó„Å¶„ÄÅÂë®Âõ≤„ÅÆÊïµ„ÇíËøΩ„ÅÑÊâï„ÅÑ„Åæ„Åó„ÅüÔºÅ');
          } else {
            setMessage('MP„ÅåË∂≥„Çä„Åæ„Åõ„Çì„ÄÇ');
          }
        } }
      ]
    },
    village: {
      description: 'Êùë„ÅÆ‰∏≠ÂøÉÈÉ®„Å´„ÅÑ„Åæ„Åô„ÄÇÂïÜ‰∫∫„Åå„ÅÑ„Åæ„Åô„ÄÇ',
      options: [
        { text: 'Êàª„Çã', location: 'start' },
        { text: 'ÂïÜ‰∫∫„Å®Ë©±„Åô', location: 'shop' },
        { text: 'Êùë‰∫∫„ÇíÂä©„Åë„Çã', location: 'village', action: () => {
          if (inventory.includes('potion')) {
            setInventory((prev) => prev.filter(item => item !== 'potion'));
            setMessage('Êùë‰∫∫„Å´ÂõûÂæ©Ëñ¨„ÇíÊ∏°„Åó„Åæ„Åó„Åü„ÄÇÊÑüË¨ù„Åï„Çå„Åæ„Åó„ÅüÔºÅ');
            setGold((prev) => prev + 20);
          } else {
            setMessage('Êùë‰∫∫„Å´Âä©„Åë„Çã„Åü„ÇÅ„ÅÆ„Ç¢„Ç§„ÉÜ„É†„Åå„ÅÇ„Çä„Åæ„Åõ„Çì„ÄÇ');
          }
        } }
      ]
    },
    shop: {
      description: 'ÂïÜ‰∫∫„Å®Ë©±„Åó„Åæ„Åó„Åü„ÄÇ„Ç¢„Ç§„ÉÜ„É†„ÇíÊâã„Å´ÂÖ•„Çå„Åæ„Åó„ÅüÔºÅ',
      options: [
        { text: 'Êàª„Çã', location: 'village' },
        { text: 'ÂõûÂæ©Ëñ¨„ÇíË≥ºÂÖ•', location: 'shop', action: () => {
          if (gold >= 50) {
            setGold((prev) => prev - 50);
            setInventory((prev) => [...prev, 'potion']);
            setMessage('50„Ç¥„Éº„É´„Éâ„ÅßÂõûÂæ©Ëñ¨„ÇíË≥ºÂÖ•„Åó„Åæ„Åó„ÅüÔºÅ');
          } else {
            setMessage('„Ç¥„Éº„É´„Éâ„ÅåË∂≥„Çä„Åæ„Åõ„Çì„ÄÇ');
          }
        } },
        { text: 'ÁÅ´Êâì„Å°Áü≥„ÇíË≥ºÂÖ•', location: 'shop', action: () => {
          if (gold >= 30) {
            setGold((prev) => prev - 30);
            setInventory((prev) => [...prev, 'torch']);
            setMessage('30„Ç¥„Éº„É´„Éâ„ÅßÁÅ´Êâì„Å°Áü≥„ÇíË≥ºÂÖ•„Åó„Åæ„Åó„ÅüÔºÅ');
          } else {
            setMessage('„Ç¥„Éº„É´„Éâ„ÅåË∂≥„Çä„Åæ„Åõ„Çì„ÄÇ');
          }
        } }
      ]
    },
    treasure: {
      description: 'ÂÆù„ÇíË¶ã„Å§„Åë„Åæ„Åó„ÅüÔºÅ„Ç≤„Éº„É†„ÇØ„É™„Ç¢„Åß„ÅôÔºÅ',
      options: []
    }
  };

  const handleOption = (option) => {
    if (option.action) {
      option.action();
    } else {
      setLocation(option.location);
    }
  };

  const currentLocation = locations[location];

  return (
    <div className="game-container">
      <div className="game-screen">
        <div className="game-header">
          <h1 className="game-title">„ÉÜ„Ç≠„Çπ„Éà„Ç¢„Éâ„Éô„É≥„ÉÅ„É£„Éº„Ç≤„Éº„É†</h1>
        </div>
        <div className="content-area">
          <div className="left-panel">
            <div className="status-section">
              <h2 className="status-title">„Ç≠„É£„É©„ÇØ„Çø„Éº„Çπ„ÉÜ„Éº„Çø„Çπ</h2>
              <div className="status-bar">
                <div className="status-item">
                  <span>HP: </span>
                  <div className="progress-bar health-bar">
                    <div className="progress-fill" style={{ width: `${health}%` }}></div>
                  </div>
                  <span>{health}/100</span>
                </div>
                <div className="status-item">
                  <span>MP: </span>
                  <div className="progress-bar mana-bar">
                    <div className="progress-fill" style={{ width: `${mana}%` }}></div>
                  </div>
                  <span>{mana}/100</span>
                </div>
                <div className="gold-section">
                  <span className="gold-icon">üí∞</span>
                  <span>{gold}</span>
                </div>
              </div>
            </div>
            <div className="event-message">
              <div className="event-icon">‚ú®</div>
              <p className="event-text">{EventSystem({
                location,
                inventory,
                health,
                mana,
                setHealth,
                setMana,
                setGold,
                setInventory
              })}</p>
            </div>
          </div>
          <div className="right-panel">
            <div className="location-section">
              <h2 className="location-title">ÁèæÂú®„ÅÆÂ†¥ÊâÄ: {location}</h2>
              <p className="location-description">{currentLocation.description}</p>
            </div>
            <div className="message-section">
              <p className="message">{message}</p>
            </div>
            <div className="options-section">
              <h2 className="option-title">ÈÅ∏ÊäûËÇ¢</h2>
              <div className="option-grid">
                {currentLocation.options.map((option, index) => (
                  <button
                    key={index}
                    onClick={() => handleOption(option)}
                    className="option-button"
                  >
                    {option.text}
                  </button>
                ))}
              </div>
            </div>
            <div className="inventory-section">
              <h2 className="inventory-title">ÊåÅ„Å°Áâ©</h2>
              <ul className="inventory-list">
                {inventory.map((item, index) => (
                  <li key={index} className="inventory-item">
                    <span>üì¶</span>
                    <span>{item}</span>
                  </li>
                ))}
              </ul>
            </div>
          </div>
        </div>
      </div>
    </div>
  );
};

export default Game;
